"""
Дано целое число n. Требуется вывести все правильные скобочные последовательности длины 2 ⋅ n, упорядоченные
 лексикографически (см. https://ru.wikipedia.org/wiki/Лексикографический_порядок).

В задаче используются только круглые скобки.

Желательно получить решение, которое работает за время, пропорциональное общему количеству правильных скобочных
последовательностей в ответе, и при этом использует объём памяти, пропорциональный n.

Формат ввода
Единственная строка входного файла содержит целое число n, 0 ≤ n ≤ 11

Формат вывода
Выходной файл содержит сгенерированные правильные скобочные последовательности, упорядоченные лексикографически.


Пример 1
Ввод	Вывод
2       (())
        ()()

Пример 2
Ввод	Вывод
3
        ((()))
        (()())
        (())()
        ()(())
        ()()()
"""

INPUT_FILENAME = 'input.txt'
OUTPUT_FILENAME = 'output.txt'

res = []


def f(cnt, index, k, init):
    # кладем открывающую скобку, если хватает места
    if (cnt <= k - index - 2):
        init[index] = '('
        f(cnt + 1, index + 1, k, init)

    # закрывающую скобку можно положить, если cnt > 0
    if cnt > 0:
        init[index] = ')'
        f(cnt - 1, index + 1, k, init)
    # выходим из цикла и добавляем в список
    if index == k:
        if cnt == 0:
            res.extend(init)


if __name__ == '__main__':
    with open(INPUT_FILENAME, 'r') as fr:
        num = int(fr.readline().split('\n')[0])  # разделение на числа через пробел # количество скобок

    if num:
        init_list = 2 * num * ['']  # пустой список, куда кладем скобки

        cnt = 0  # разница между скобками
        index = 0  # индекс, по которому кладем скобку в список

        f(cnt, index, num * 2, init_list)

        res = ''.join(res)
        start = 0
        end = 0
        count = int(len(res) // (num*2))

        with open(OUTPUT_FILENAME, 'w') as fw:
            for i in range(count+1):
                end = (i + 1) * 2 * num
                if res[start:end]:
                    fw.write("%s\n" % res[start:end])
                start = end
